name: protu-ai

services:
  user-service:
    container_name: user-service-container
    build:
      context: ../user-service
      dockerfile: Dockerfile
    image: protu-ai/user-service:v1.0.0
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    env_file:
      - ../user-service/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - maven-repo:/root/.m2

  chat-service:
    container_name: chat-service-container
    build:
      context: ../chat-service
      dockerfile: Dockerfile
    image: protu-ai/chat-service:v1.0.0
    ports:
      - "8082:8082"
    env_file:
      - ../chat-service/.env
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/protu-db
    volumes:
      - node_modules:/app/node_modules
      - attachments:/app/uploads

  postgres:
    image: postgres:latest
    container_name: postgres-db-container
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: protu-db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d

  redis:
    image: redis:alpine3.21
    container_name: redis-cache-container
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    command: ["redis-server"]
    volumes:
      - redis-data:/data

  gateway:
    container_name: gateway-container
    build:
      context: ../gateway-service
      dockerfile: Dockerfile
    image: protu-ai/gateway:v1.0.0
    ports:
      - "80:80"
    depends_on:
      - user-service
      - chat-service
      # - model-service

  # model-service:
  #   container_name: model-service-container
  #   build:
  #     context: ../
  #     dockerfile: Dockerfile
  #   image: protu-ai/model-service:v1.0.0
  #   ports:
  #     - "8000:8000" # Expose port 8000 for the FastAPI application
  #   env_file:
  #     - ../model-service/.env # Path to the .env file for the model service
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   environment:
  #     DB_HOST: postgres
  #     DB_PORT: 5432
  #     DB_NAME: protu-db
  #     DB_USER: ${POSTGRES_USER}
  #     DB_PASSWORD: ${POSTGRES_PASSWORD}
  #   volumes:
  #     - model-data:/app/data

volumes:
  node_modules:
  attachments:
  maven-repo:
  postgres-data:
  redis-data:
  # model-data:
