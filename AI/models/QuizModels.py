from pydantic import BaseModel, Field
from typing import List


class TagAgentResponse(BaseModel):

    tags: List[str] = Field(
        default=[], description="List of tags for the quiz based on the prompt that is provided and the difficulty level and question type")
    message: str = Field(
        default="", description="Message to be displayed to the user")
    is_relevant: bool = Field(
        default=True, description="Flag to indicate that the prompt is relevant to be used for a programming quiz like quiz on python, java, c++ or in tracks like frontend, data science, etc.")


class TagAgentInput(BaseModel):
    prompt: str = Field(...)
    difficulty: str = Field(...)
    question_type: str = Field(...)
    time: int = Field(...)
    number_of_tags: int = Field(
        default=6, description="Number of tags to be generated for the quiz")


class TagsFilterOutput(BaseModel):
    final_tags: List[str] = Field(
        min_length=6, description="List of at least 6 programming and software engineering-related tags curated from the prompt, tags, additional tags, and preferences, aligned with the quiz's difficulty and question type"
    )


class QuizQuestion(BaseModel):

    question: str = Field(...,
                          description="The question to be asked in the quiz")
    options: List[str] = Field(
        ..., min_length=2, max_length=4, description="List of options for the question")
    correct_answer_text: str = Field(
        ..., description="The correct answer text to the question")


class QuizAgentResponse(BaseModel):
    quiz_title: str = Field(
        ..., description="A concise title reflecting the topic and difficulty of the quiz (e.g., 'Intermediate Python Quiz')")
    topic: str = Field(
        ..., description="A topic (at most two words) derived from final_tags, describing the quiz questions' content (e.g., 'JavaScript Basics', 'Python Algorithms')")
    questions: List[QuizQuestion] = Field(
        ..., min_length=1, description="List of questions for the quiz based on the prompt and the tags")


class QuizModelAnswer(BaseModel):
    question_id: int = Field(...,
                             description="The unique identifier for the question.")
    question: str = Field(...,
                          description="The question to be asked in the quiz")
    options: List[str] = Field(..., min_length=2, max_length=4,
                               description="List of options for the question")
    correct_answer_text: str = Field(...,
                                     description="The correct answer text to the question")
    user_answer: str = Field(...,
                             description="The answer to the question provided by the user")


class FeedbackInput(BaseModel):
    incorrect_questions: List[QuizModelAnswer] = Field(
        ...,
        description="A list containing only the questions that the user answered incorrectly."
    )

    k: int = Field(
        description="The maximum number of course recommendations to return in the final output.",
        default=3
    )


class CourseSearchInput(BaseModel):
    topics: List[str] = Field(
        ...,
        description="A list of specific and granular topics to search for courses on. For example: ['python_dictionaries', 'css_flexbox', 'javascript_promises']."
    )


class RecommendedCourse(BaseModel):
    """
    Represents a single course recommendation.
    """

    course_id: int = Field(
        ...,
        description="The unique identifier for the recommended course."
    )
    relevance_score: float = Field(
        ...,
        description="The relevance score of the course to the topic, as determined by the search tool."
    )


class WeaknessAnalyzerOutput(BaseModel):
    """
    The top-level model for the Weakness Analyzer agent's output.
    This will be the input for the Feedback Synthesizer agent.
    """
    incorrect_questions: List[QuizModelAnswer] = Field(
        ..., description="A list of only the questions the user answered incorrectly.")
    all_topics: List[str] = Field(
        ..., description="A consolidated list of all topics derived from the incorrect questions.")
    all_recommended_courses: List[RecommendedCourse] = Field(
        ..., description="A consolidated list of all course recommendations for the identified topics.")


class DetailedExplanation(BaseModel):
    """
    Represents a detailed explanation for a single incorrect answer.
    """
    question_id: int = Field(...,
                             description="Identifier of the question being explained.")
    explanation: str = Field(
        ..., description="The detailed explanation for why the user's answer was incorrect and the correct answer is right.")


class FeedbackSynthesizerOutput(BaseModel):
    """
    The top-level model for the final feedback report generated by the agent.
    This is the data your application will use to render the feedback UI.
    """
    feedback_message: str = Field(
        ..., description="A complete, user-facing motivational message including the list of weak point topics.")
    detailed_explanations: List[DetailedExplanation] = Field(
        ..., description="A list of detailed explanations for each question the user answered incorrectly.")
    recommended_course_ids: List[int] = Field(
        ..., description="The final, curated list of the top 'k' course IDs to recommend to the user.")
